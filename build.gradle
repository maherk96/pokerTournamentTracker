plugins {
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'java'
    id 'com.diffplug.spotless' version '6.22.0'
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '7.1.1'
}

group = 'io.games'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

spotless {
    java {
        googleJavaFormat(googleJavaFormatVersion)
        importOrder('java', 'javax', 'org', 'io')
    }
    kotlinGradle {
        target '**/*.gradle.kts'
        ktlint().userData(['indent_size': '4'])
    }
    format 'misc', {
        target '**/*.md', '**/*.gradle', '**/*.yaml', '**/*.yml'
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
    implementation "io.github.wimdeblauwe:error-handling-spring-boot-starter:${errorHandlingVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

bootRun {
    environment 'SPRING_PROFILES_ACTIVE', project.findProperty('SPRING_PROFILES_ACTIVE') ?: 'local'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    maxParallelForks = (Runtime.runtime.availableProcessors() / 2) ?: 1
    testLogging {
        events "passed", "skipped", "failed"
    }
    reports {
        junitXml.required = true
        html.required = true
    }
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "${jacocoVersion}"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

dependencyCheck {
    failOnError = false
    suppressionFiles = ['dependency-check-suppressions.xml']
    formats = ['HTML', 'XML']
}

tasks.withType(JavaCompile).configureEach {
    options.incremental = true
}
